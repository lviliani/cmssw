diff -rupN geant4.10.00.p02.orig/source/geometry/navigation/src/G4Navigator.cc geant4.10.00.p02/source/geometry/navigation/src/G4Navigator.cc
--- geant4.10.00.p02.orig/source/geometry/navigation/src/G4Navigator.cc	2014-09-05 14:46:30.000000000 +0200
+++ geant4.10.00.p02/source/geometry/navigation/src/G4Navigator.cc	2014-09-05 15:37:33.000000000 +0200
@@ -1266,6 +1266,28 @@ void G4Navigator::SetupHierarchy()
   }
 }
 
+G4ThreeVector NavigateDaughtersForNormal(const G4LogicalVolume* v, const G4ThreeVector& point){
+  G4ThreeVector    ExitNormal(0.,0.,0.);
+  for (int i = 0; i < v->GetNoDaughters(); ++i){
+    const G4VPhysicalVolume* cur_phys = v->GetDaughter(i);
+    const G4LogicalVolume*   cur_logi = cur_phys->GetLogicalVolume();
+    G4AffineTransform transform = G4AffineTransform(cur_phys->GetRotation(), cur_phys->GetTranslation()).Invert();
+    G4ThreeVector daughterPointOwnLocal=transform.TransformPoint( point );
+    if (cur_logi->GetNoDaughters()>0){
+      ExitNormal = NavigateDaughtersForNormal(cur_logi, daughterPointOwnLocal);
+      if( std::fabs(ExitNormal.mag2()-1.0 ) < CLHEP::perMillion)
+        return ExitNormal;
+    }
+  }
+
+  G4VSolid* solid = v->GetSolid();
+  ExitNormal= -(solid->SurfaceNormal(point));
+  if( std::fabs(ExitNormal.mag2()-1.0 ) < CLHEP::perMillion )
+    return ExitNormal;
+  return ExitNormal;
+
+}
+
 // ********************************************************************
 // GetLocalExitNormal
 //
@@ -1392,18 +1414,21 @@ G4ThreeVector G4Navigator::GetLocalExitN
     {
       G4VSolid* daughterSolid =fHistory.GetTopVolume()->GetLogicalVolume()
                                                       ->GetSolid();
-      ExitNormal= -(daughterSolid->SurfaceNormal(fLastLocatedPointLocal));
+      ExitNormal= NavigateDaughtersForNormal(fHistory.GetTopVolume()->GetLogicalVolume(), fLastLocatedPointLocal);
       if( std::fabs(ExitNormal.mag2()-1.0 ) > CLHEP::perMillion )
       {
         G4ExceptionDescription desc;
         desc << " Parameters of solid: " << *daughterSolid
              << " Point for surface = " << fLastLocatedPointLocal << std::endl;
         G4Exception("G4Navigator::GetLocalExitNormal()",
-                    "GeomNav0003", FatalException, desc,
+                    "GeomNav0003", JustWarning, desc,
                     "Surface Normal returned by Solid is not a Unit Vector." );
-      }
-      fCalculatedExitNormal= true;
-      *valid = true;
+        fCalculatedExitNormal= false;
+        *valid = false;
+      } else {
+        fCalculatedExitNormal=true;
+        *valid = true;
+      } 
     }
     else
     {
@@ -1417,10 +1442,10 @@ G4ThreeVector G4Navigator::GetLocalExitN
       { 
         *valid = false;
         fCalculatedExitNormal= false; 
-        G4ExceptionDescription message; 
-        message << "Function called when *NOT* at a Boundary." << G4endl;
-        G4Exception("G4Navigator::GetLocalExitNormal()",
-                    "GeomNav0003", JustWarning, message); 
+        //G4ExceptionDescription message; 
+        //message << "Function called when *NOT* at a Boundary." << G4endl;
+        //G4Exception("G4Navigator::GetLocalExitNormal()",
+        //            "GeomNav0003", JustWarning, message); 
       }
     }
   }
